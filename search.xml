<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内存对齐</title>
      <link href="/nei-cun-dui-qi/"/>
      <url>/nei-cun-dui-qi/</url>
      
        <content type="html"><![CDATA[<p><strong>注：此文参考chatGPT回答</strong></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>举个简单的例子：（环境：64位Windows 11，GCC，C++20，O3优化）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">A1</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> a<span class="token punctuation">;</span>  <span class="token keyword">int</span> b<span class="token punctuation">;</span>  <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">A2</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> a<span class="token punctuation">;</span>  <span class="token keyword">char</span> b<span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 12 8</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么两个结构体明明有同样的内容，却有不同大小的内存呢？因为内存对齐！</p><h2 id="内存对齐规则"><a href="#内存对齐规则" class="headerlink" title="内存对齐规则"></a>内存对齐规则</h2><p>1、没有#pragma pack宏的对齐规则</p><ul><li>结构体的起始存储位置必须是能够被该结构体中最大的数据类型所整除。</li><li>每个数据成员存储的起始位置是自身大小的整数倍（比如int在64位机为4字节，则int型成员要从4的整数倍地址开始存储）。</li><li>结构体总大小（也就是sizeof的结果），必须是该结构体成员中最大的对齐模数的整数倍。若不满足，会根据需要自动填充空缺的字节。</li><li>结构体包含另一个结构体成员，则被包含的结构体成员要从其原始结构体内部最大对齐模数的整数倍地址开始存储。（比如struct a里存有struct b，b里有char，int，double等元素，那b应该从8的整数倍开始存储。)</li><li>结构体包含数组成员，比如char a[3]，它的对齐方式和分别写3个char是一样的，也就是说它还是按一个字节对齐。如果写：typedef char Array[3]，Array这种类型的对齐方式还是按一个字节对齐，而不是按它的长度3对齐。</li><li>结构体包含共用体成员，则该共用体成员要从其原始共用体内部最大对齐模数的整数倍地址开始存储。</li></ul><p>2、存在#pragma pack宏的对齐</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>    </span><span class="token comment">//编译器将按照n个字节对齐  </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>     </span><span class="token comment">//取消自定义字节对齐方式</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么对齐规则就变成下面的</p><ul><li>结构，联合，或者类的数据成员，第一个放在偏移为0的地方，以后每个数据成员的对齐，按照#pragma pack指定的数值和自身对齐模数中较小的那个。</li></ul><hr><p>回到上面的程序，按照上述规则，两个结构体都按照最大的数据类型int的 4 字节对齐。第一个结构体，char占1字节，由于接下来是int类型的四个字节，所以会填充为4字节，int过后又有一个char，再次被填充4字节，总共 4 + 4 + 4 = 12 字节。第二个结构体，两个char占2字节，后跟一个int，于是被填充为4字节，总共 4 + 4 = 8 字节。</p><p>这很对，但这东西到底有什么用？</p><h2 id="内存对齐的作用"><a href="#内存对齐的作用" class="headerlink" title="内存对齐的作用"></a>内存对齐的作用</h2><p>内存对齐在实际开发中有很多用途，以下是其中一些：</p><ol><li>提高程序效率：内存对齐可以使变量存储在自然边界上，从而提高 CPU 访问内存的效率，从而提高程序的效率。</li><li>保证内存安全：当结构体或类中的成员变量按照对齐规则进行分配时，可以确保数据不会因为字节对齐而出现错误的偏移量，从而保证内存的安全性。</li><li>节省内存空间：通过内存对齐，可以使变量的存储更加紧凑，减少内存碎片，从而节省内存空间。</li><li>优化缓存行访问：现代 CPU 采用了缓存行的概念，内存对齐可以让变量存储在相邻的缓存行中，从而提高 CPU 访问缓存的效率。</li><li>改善并行处理效率：内存对齐可以改善多线程并发处理时的效率，因为当多个线程访问同一内存时，内存对齐可以减少线程之间的冲突，从而提高并行处理效率。</li><li>确保兼容性：不同编译器或操作系统可能有不同的内存对齐规则，因此在开发中遵循正确的内存对齐规则可以确保程序的兼容性和可移植性。</li></ol><p>自定义网络通讯协议包通常都是定义成struct的形式， 而struct会自动内存对齐，这会造成结构体成员间有”空洞“，传给其它平台后，其它平台弄不清楚原平台是按什么方式对齐的，只会按自己的方式解包。 解出来的结果有可能是错误的。为防止这种情况出现，自定义通讯协议时，一定要让结构体（或联合）成员间都按1来对齐。</p><p>总之，内存对齐是一种重要的技术，它在实际开发中可以优化程序性能、提高程序安全性、节省内存空间等，因此开发人员需要深入理解内存对齐的原理和规则，并根据实际情况进行合理的内存对齐</p><h2 id="内存对齐与位域"><a href="#内存对齐与位域" class="headerlink" title="内存对齐与位域"></a>内存对齐与位域</h2><p>位域是一种控制内存二进制位的技术</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token keyword">uint16_t</span> a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">uint16_t</span> b <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">uint16_t</span> c <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// sizeof(A) == 2;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上便可指定a占用1bit（bit不是byte！），b 5bit，c 3 bit</p><p>位域的对齐规则如下：</p><ul><li><p>当相邻位域成员的类型相同时，如果它们的位宽之和小于类型大小，那么后面的成员紧邻前一个成员存储；如果它们的位宽之和大于类型大小，那么后面的成员将存在下一个类型大小的空间</p></li><li><p>如果相邻的位域的数据类型不相同，则不同编译器实现不一样，有些编译器选择不压缩</p></li><li><p>如果位域不连续，中间含非位域，则按标准数据类型大小划分，比如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">{</span>　　<span class="token keyword">uint16_t</span> a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>　　<span class="token keyword">int</span> b<span class="token punctuation">;</span>　　<span class="token keyword">uint16_t</span> c <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// sizeof(A) == 12;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>对于第一个位域对齐规则再举个例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token keyword">uint16_t</span> a <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">uint16_t</span> b <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">uint16_t</span> c <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">union</span> <span class="token punctuation">{</span>  A a<span class="token punctuation">;</span>  <span class="token keyword">uint16_t</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span> op<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  op<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  op<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  op<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 b 的二进制表示</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token comment">// 0000000001000011</span>  op<span class="token punctuation">.</span>a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token comment">// 0000000001000010</span>  op<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token comment">// 0000000001000000</span>  op<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token comment">// 0000000000000000</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-11-alignas说明符"><a href="#C-11-alignas说明符" class="headerlink" title="C++11 alignas说明符"></a>C++11 alignas说明符</h2><p>该说明符可以接受类型或者常量表达式。特别需要注意的是，该常量表达式计算的结果必须是一个2的幂值，否则是无法通过编译的。具体用法如下（这里采用GCC 编译器，因为其alignof可以查看变量的对齐字节长度）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>  <span class="token keyword">char</span> a1<span class="token punctuation">;</span>  <span class="token keyword">int</span> a2<span class="token punctuation">;</span>  <span class="token keyword">double</span> a3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">X1</span> <span class="token punctuation">{</span>  <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">char</span> a1<span class="token punctuation">;</span>  <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token keyword">int</span> a2<span class="token punctuation">;</span>  <span class="token keyword">double</span> a3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> X2 <span class="token punctuation">{</span>  <span class="token keyword">char</span> a1<span class="token punctuation">;</span>  <span class="token keyword">int</span> a2<span class="token punctuation">;</span>  <span class="token keyword">double</span> a3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> X3 <span class="token punctuation">{</span>  <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">char</span> a1<span class="token punctuation">;</span>  <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token keyword">int</span> a2<span class="token punctuation">;</span>  <span class="token keyword">double</span> a3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COUT_ALIGN</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                                                          </span><span class="token punctuation">\</span>  <span class="token expression">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> </span><span class="token string">"alignof("</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">s</span> </span></span><span class="token string">") = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">COUT_SIZE</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                                                          </span><span class="token punctuation">\</span>  <span class="token expression">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> </span><span class="token string">"sizeof("</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">s</span> </span></span><span class="token string">") = "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  X x<span class="token punctuation">;</span>  X1 x1<span class="token punctuation">;</span>  X2 x2<span class="token punctuation">;</span>  X3 x3<span class="token punctuation">;</span>  <span class="token keyword">alignas</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> X3 x4<span class="token punctuation">;</span>  <span class="token function">COUT_ALIGN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 8</span>  <span class="token function">COUT_ALIGN</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 16</span>  <span class="token function">COUT_ALIGN</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 16</span>  <span class="token function">COUT_ALIGN</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 16</span>  <span class="token function">COUT_ALIGN</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4</span>  <span class="token function">COUT_ALIGN</span><span class="token punctuation">(</span>x4<span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>  <span class="token function">COUT_SIZE</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 16</span>  <span class="token function">COUT_SIZE</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 32</span>  <span class="token function">COUT_SIZE</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 16</span>  <span class="token function">COUT_SIZE</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 32</span>  <span class="token function">COUT_SIZE</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 32</span>  <span class="token function">COUT_SIZE</span><span class="token punctuation">(</span>x4<span class="token punctuation">.</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在例子中，X的类型对齐字节长度为8字节，而X2在使用了alignas(16)之后，对齐字节长度修改为了16字节。<br>另外， 如果修改结构体成员的对齐字节长度，那么结构体本身的对齐字节长度也会发生变化，因为结构体类型的对齐字节长度总是需要大于或者等于其成员变量类型的对齐字节长度。<br>比如X1的成员变量a1类型的对齐字节长度修改为了16字节，所有X1类型也被修改为16字节对齐。<br>同样的规则也适用于结构体X3，X3类型的对齐字节长度被指定为16字节，虽然其成员变量a1的类型对齐字节长度被指定为8字节，但是并不能改变X3类型的对齐字节长度。<br>最后要说明的是，结构体类型的对齐字节长度，并不能影响声明变量时变量的对齐字节长度，比如x4。<br>不过在变量声明时指定对齐字节长度，也不影响变量内部成员变量类型的对齐字节长度，比如x4.a1。上面的代码用结构体作为例子，实际上对于类也是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统编程入门</title>
      <link href="/linux-xi-tong-bian-cheng-ru-men/"/>
      <url>/linux-xi-tong-bian-cheng-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="简易环境搭建"><a href="#简易环境搭建" class="headerlink" title="简易环境搭建"></a>简易环境搭建</h2><p>本地</p><ul><li>下载 vmware</li><li>从官网下载 20.04LTS 镜像（长期维护版），安装虚拟机，100G空间，4G内存，2核（本地 win11，1T，16G，4核）</li><li>下载 ssh，复制 id_rsa.pub 公钥文件</li></ul><p>虚拟机</p><ul><li>安装 gcc，g++，ssh，gdb，make，<code>sudo apt install gcc g++ ssh gdb make</code></li><li>创建 ssh 公私钥，<code>ssh-keygen</code></li><li>复制之前的公钥到 authorized_keys文件，若没有则创建该文件</li><li>ifconfig 查看 ip 地址</li></ul><p>本地</p><ul><li>下载vscode，在remote管理设置里，以之前 ip 地址创建远程连接</li><li>登录虚拟机</li><li>下载 C++ 全家桶插件，中文插件，文件显示美化插件</li></ul><h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><p>编译 C 文件，尽量使用 gcc 命令，编译 C++ 文件，尽量使用 g++</p><p>gcc 不能自动和 C++ 使用的库链接，g++ 统一当作 C++ 编译，语法检查更严，故尽量用对应命令编译</p><table><thead><tr><th>gcc编译选项</th><th>说明</th></tr></thead><tbody><tr><td>-E</td><td>预处理指定的源文件，不进行编译</td></tr><tr><td>-S</td><td>编译指定的源文件,但是不进行汇编</td></tr><tr><td>-c</td><td>编译、汇编指定的源文件，但是不进行链接</td></tr><tr><td>-o</td><td>-o file1 file2 或 file2 -o file1 将文件 file2 编译成可执行文件 file1</td></tr><tr><td>-I</td><td>指定include包含文件的搜索目录</td></tr><tr><td>-g</td><td>在编译的时候，生成调试信息，该程序可以被调试器调试</td></tr><tr><td>-D</td><td>在程序编译的时候，指定一个宏</td></tr><tr><td>-w</td><td>不生成任何警告信息</td></tr><tr><td>-Wall</td><td>生成所有警告信息</td></tr><tr><td>-On</td><td>n的取值范围:0~3。编译器的优化选项的4个级别,-o0表示没有优化，-o1为缺省值，-o3优化级别最高</td></tr><tr><td>-l</td><td>在程序编译的时候，指定使用的库</td></tr><tr><td>-L</td><td>指定编译的时候，搜索的库的路径</td></tr><tr><td>-fPIC/-fpic</td><td>生成与位置无关的代码</td></tr><tr><td>-shared</td><td>生成共享目标文件,通常用在建立共享库时</td></tr><tr><td>-std</td><td>指定c方言，如:-std=c99,gcc默认的方言是GNU c</td></tr></tbody></table><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>静态库：GCC 进行链接时，会把静态库中代码打包到可执行程序中</p><p>动态库：GCC 进行链接时，动态库的代码不会被打包到可执行程序中</p><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><h4 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h4><p><code>ar rcs libxxx.a ...</code> 使用 .o 文件创建一个名为xxx的静态库</p><p>r —— 将文件插入备存文件中<br>c —— 建立备存文件<br>s —— 索引</p><p>扩展名在 linux 下是 .a ，windows 下 .lib</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><img src="https://caidd-1305545187.cos.ap-nanjing.myqcloud.com/20230123154729.png"></p><p>对于该示例，可以使用命令 <code>gcc main.c -o app -I ./include/ -l calc -L ./lib</code> 来将静态库编译进来</p><p>表示在 <code>./include</code> 目录下搜寻头文件，链接名为 <code>calc</code> 的库，在 <code>./lib</code> 下搜寻库</p><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><p>程序启动之后，动态库会被动态加载到内存中，通过ldd (list dynamicdependencies）命令检查动态库依赖关系</p><p><strong>动态库的定位</strong>（linux系统）：</p><p>对于elf格式的可执行文件，由 ld-linux.so 完成链接，路径为</p><p><strong>DT_RPATH段 -&gt; 环境变量 LD_LIBRARY_PATH -&gt; /etc/ld.so.cache 文件列表 -&gt; /lib/，/usr/lib</strong></p><p><strong>环境变量</strong>：</p><p>全局在 <strong>/etc/profile</strong> 修改，用户在 <strong>~/.bashrc</strong>，用户与全局相同的环境变量会覆盖</p><p>一个变量可以对应多个值，多个值以 ：隔开，寻找时依次寻找</p><p>创建环境变量可用在上述两个文件中写export命令，并source使之生效，比如 <code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:绝对路径</code></p><p>不用export定义的变量只对该shell有效，对子shell也是无效的</p><p>如果只在某个终端写export命令，则环境变量是临时的</p><h4 id="制作-1"><a href="#制作-1" class="headerlink" title="制作"></a>制作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -c -fpic/fPIC a.c b.cgcc -shared a.o b.o -o libcalc.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-fpic/fPIC 生成位置无关的文件</p><p>-shared 生成共享库，以动态链接</p><p>如果链接的可执行文件的GOT大小超过计算机特定的最大大小，则会从链接器收到错误消息，指示-fpic不起作用。在这种情况下，请使用-fPIC重新编译。GOT大小根据操作系统的不同而大小不一样。因此尽量使用-fPIC编译</p><p>扩展名在 linux 下是 .a ，windows 下 .dll</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><img src="https://caidd-1305545187.cos.ap-nanjing.myqcloud.com/20230123194629.png"></p><p>示例：</p><p><code>gcc main.c -o main -I include/ -L lib/ -l calc</code></p><p>而后由之前所说有三种方法：</p><p>第一种：</p><p>然后在之前说的两个文件夹添加环境变量地址即可，并使用source使之生效</p><p><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/caidd/linux/test/lib</code></p><p>该命令表示，保持原始环境变量的内容，在其后添加一个变量，即库文件夹位置</p><p>第二种：</p><p>修改 /etc/ld.so.conf 文件，直接将目标库的文件夹绝对位置复制到最后即可</p><p>然后使用 sudo ldconfig 使之生效</p><p>第三种：</p><p>将库放到 /lib/，/usr/lib 里面，便会自动找到，但由于会引起命名冲突，所以不推荐</p><h3 id="静态库与动态库对比"><a href="#静态库与动态库对比" class="headerlink" title="静态库与动态库对比"></a>静态库与动态库对比</h3><p>静态库：</p><p>优点</p><ul><li>静态库被打包到应用程序中加载速度快</li><li>发布程序无需提供静态库，移植方便</li></ul><p>缺点</p><ul><li>消耗系统资源,浪费内存</li><li>更新、部暑、发布麻烦</li></ul><p>动态库：</p><p>优点</p><ul><li>可以实现进程间资源共享(共享库)更新、部署、发布简单</li><li>可以控制何时加载动态库</li></ul><p>缺点</p><ul><li>加载速度比静态库慢</li><li>发布程序时需要提供依赖的动态库</li></ul><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p><a href="https://seisman.github.io/how-to-write-makefile/index.html">自己学</a>，后续会接触到的cmake，xmake，主要用于生成 makefile 文件。这些东西都是用于处理大型项目的依赖关系。</p><p>Makefile 不仅使得项目编译更为轻松，还能使编译速度更快，其会自动比对文件的修改时间，只有当目标文件不存在或依赖文件的更新时间晚于目标文件才会进行更新。</p><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><p>生成可调试执行程序，gcc，g++ 需要加上 -g 参数，才能在原始程序添加符号表，使得 gdb 能够进行调试</p><p><strong>启动和退出</strong><br>gdb 可执行程序名字<br>quit 退出</p><p><strong>给程序设置参数/获取设置参数</strong></p><p>set args 10 20<br>show args</p><p><strong>GDB使用帮助</strong></p><p>help</p><p><strong>查看当前文件代码</strong></p><p>list/l （从默认位置显示）</p><p>list/l 行号 （以指定行号为中心进行显示）</p><p>list/l 函数名 （从指定的函数显示）</p><p><strong>查看非当前文件代码</strong></p><p>list/l 文件名:行号 </p><p>list/l 文件名:函数名</p><p><strong>设置与查看显示的行数</strong></p><p>show list/listsize</p><p>set list/listsize 行数</p><p><strong>设置断点</strong></p><p>b/break 行号</p><p>b/break 函数名</p><p>b/break 文件名:行号</p><p>b/break 文件名:函数</p><p><strong>查看断点</strong></p><p>i/info b/break</p><p><strong>删除断点</strong></p><p>d/del/delete 断点编号</p><p><strong>设置断点无效</strong></p><p>dis/disable 断点编号</p><p><strong>设置断点生效</strong></p><p>ena/enable 断点编号</p><p><strong>设置条件断点（一般用在循环的位置）</strong></p><p>b/break 10 if i == 5</p><p><strong>运行GDB程序</strong></p><p>start（程序停在第一行）</p><p>run（遇到断点才停）</p><p><strong>继续运行，到下一个断点停</strong></p><p>c/continue</p><p><strong>向下执行一行代码（不会进入函数体）</strong></p><p>n/next</p><p><strong>变量操作</strong></p><p>p/print  变量名（打印变量值）</p><p>ptype 变量名（打印变量类型）</p><p><strong>向下单步调试（遇到函数进入函数体）</strong></p><p>s/step</p><p>finish（跳出函数体）</p><p><strong>自动变量操作</strong></p><p>display num（自动打印指定变量的值）</p><p>i/info display</p><p>undisplay 编号</p><p><strong>其他操作</strong></p><p>set var 变量名 = 变量值</p><p>untill （跳出循环，跳出循环的条件是循环内部没有断点，并且在循环语句内）</p><p><strong>多进程调试</strong></p><p>set folllow-fork-mode [parent（默认） | child] 设置调试父进程或者子进程</p><p>set detach-on-fork [on l off] 设置调试模式</p><p>默认为on，表示调试当前进程的时候，其它的进程继续运行，如果为 off，调试当前进程的时候．其它进程被GDB挂起。</p><p>info inferiors 查看调试的进程</p><p>inferior id 切换当前调试的进程</p><p>detach inferiors id 使进程脱离GDB调试</p><p><strong>Core dump 分析</strong><br><a href="https://www.cnblogs.com/bodhitree/p/5850212.html">gdb core模式</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp浮点数问题</title>
      <link href="/cpp-fu-dian-shu-wen-ti/"/>
      <url>/cpp-fu-dian-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>今天下午遇到这样<a href="https://codeforces.com/contest/1737/problem/B">一道题</a>，被卡了精度，联想起以前比赛时被卡精度的题，以及计算计组成原理的IEEE浮点数标准。故在此进行总结</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://raw.githubusercontent.com/caiddd/picture/main/32-64.jpg"></p><p>在不同的计算机，不同的编译器中，常用的 <code>int</code>, <code>double</code>, <code>long long</code> 类型存储大小基本不变，但是 <code>long double</code> 变化却很多，可偏偏这种数据类型在卡精度时又很常用，所以有必要好好分析一下。</p><p>在C的标准中，仅规定 <code>long double</code> 的精度范围大于等于 <code>double</code></p><p>在 msvc（即VS使用的编译器）中， <code>long double</code> 等同于 <code>double</code> ，都是8个字节</p><blockquote><p>  The<code>long double</code> type is identical to the double type.</p></blockquote><p>而在 gcc 中两者是不同的</p><p>32位下<code>long double</code> 是12个字节, 64位下是16个字节.</p><p><img src="https://raw.githubusercontent.com/caiddd/picture/main/20221008150707.png"></p><p>现今竞赛环境多为64位机 G++/GCC，即 <code>long double</code> 占用了16个字节，128位。</p><p>然而实际编译时，由于x86架构上 fpu 的存在，大部分编译器将 <code>long double</code> 编译成80位的浮点数，用科学计数法的话，其尾数部分是64位。剩下的部分主要用于内存对齐，防止存取的麻烦以及内存空间碎片化。</p><p>也就是说，尾数部分刚好存得下一个 <code>long long</code> ，不会损失精度。</p><p>然而，<code>double</code> 尾数部分就没有那么大了</p><p><img src="https://raw.githubusercontent.com/caiddd/picture/main/20221008152931.png"></p><p>所以 <code>long long</code> 在转为 <code>double</code> 时会损失不少精度</p><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><p>想起以前很多时候，觉得一个库函数好用就天天拿来玩，却没有去想其功能与使用范围。导致埋下了不少坑。</p><h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h3><p>就我个人而言，最易出问题的当数 <code>sqrt</code> 函数</p><p>很多人都知道这个函数是求一个数的根，但是却没有去看其返回类型以及传入类型</p><p>查看cmath库的定义源码</p><p><img src="https://raw.githubusercontent.com/caiddd/picture/main/20221008154023.png"></p><p>可见除 <code>float</code>，<code>long double</code>类型外，其余均返回 <code>double</code></p><p>其中</p><p><img src="https://raw.githubusercontent.com/caiddd/picture/main/20221008155005.png"></p><p><code>float</code> 另调用 <code>math.h</code> 的 <code>sqrtf</code> 函数</p><p><code>long double</code> 另调用 <code>math.h</code> 的 <code>sqrtl</code> 函数</p><p>其他类型则调用 <code>math.h</code> 的 <code>sqrt</code> 函数</p><p>该函数在C库仅有如下声明</p><p><img src="https://raw.githubusercontent.com/caiddd/picture/main/20221008155245.png"></p><p>故整型均会强转为 <code>double</code> 进行运算，<code>long long</code> 便是在此处传入时损失了精度。若想不损失精度，要么传入的时候强转为<code>long double</code> ，要么调用C库的 <code>sqrtl</code> 函数。</p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p>后续又对许多数学库函数进行了观察，发现很多库函数都对 <code>float</code> ,<code>long double</code> 进行了单独处理，对于 <code>float</code> 函数名基本都为常见的那个后面加个<code>f</code>，对于 <code>float</code> 函数名基本都为常见的那个后面加个<code>l</code>。数学库的函数大部分都是返回 <code>double</code> 型，而非整型。初学者往往会将 <code>pow</code>，<code>ceil</code> 误当作返回整型的函数，一定要注意精度的损失。</p><p>顺带一提，这些数学库函数的复杂度基本都是可以当作 $O(1)$ 的，只是常数比较大，其底层有用到类似牛顿迭代法一类的数学加速方法。</p><h2 id="算法上避免精度误差"><a href="#算法上避免精度误差" class="headerlink" title="算法上避免精度误差"></a>算法上避免精度误差</h2><p>避免除法取根号等运算，不仅可以在精度上提升，还可以提快速度。我曾经就有因为除法而在一道题上超时。</p><p>替换方法举例：</p><p>如将</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token keyword">int</span> ax<span class="token punctuation">,</span> <span class="token keyword">int</span> ay<span class="token punctuation">,</span> <span class="token keyword">int</span> bx<span class="token punctuation">,</span> <span class="token keyword">int</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">p2</span><span class="token punctuation">(</span>ax <span class="token operator">-</span> ay<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">p2</span><span class="token punctuation">(</span>bx <span class="token operator">-</span> by<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换为</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token keyword">int</span> ax<span class="token punctuation">,</span> <span class="token keyword">int</span> ay<span class="token punctuation">,</span> <span class="token keyword">int</span> bx<span class="token punctuation">,</span> <span class="token keyword">int</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">p2</span><span class="token punctuation">(</span>ax <span class="token operator">-</span> ay<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">p2</span><span class="token punctuation">(</span>bx <span class="token operator">-</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并直接使用整数比较距离远近，只在结果输出时对其进行特殊处理。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp常数优化技巧</title>
      <link href="/cpp-chang-shu-you-hua-ji-qiao/"/>
      <url>/cpp-chang-shu-you-hua-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>下面这三行代码加到C++的开头，有些情况可以对代码运行速度有显著的提升<br>一般来说，代码结构越简单，这三行代码优化得越多</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">target</span> <span class="token punctuation">(</span></span><span class="token string">"avx2"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimization</span> <span class="token punctuation">(</span></span><span class="token string">"O3"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimization</span> <span class="token punctuation">(</span></span><span class="token string">"unroll-loops"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>料理制作</title>
      <link href="/liao-li-zhi-zuo/"/>
      <url>/liao-li-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<p>本文持续更新，内容主要是单人料理，量也基本都按一个人来</p><h2 id="基本刀法"><a href="#基本刀法" class="headerlink" title="基本刀法"></a>基本刀法</h2><ol><li>连续快刀纵切，主要是蔬菜类</li><li>慢刀斜切，一定要厚度均匀，刀与砧板成70度左右即可，不要太斜。该法主要为增大接触面积，针对肉类</li><li>双刀暴切，做肉末，蒜蓉等</li><li>对角线切加纵切，主要针对方块类食材，如水豆腐块。方法是先沿方块对角线切两刀，分成四个等腰三角形柱体。再把四个柱体沿高纵切，即可得到许多三角形的扁豆腐，形状好看也入味。</li><li>花切，对于食材连续切了很多刀，但是每刀都没到底，切完还是一个整体。如果是豆腐，这样切好后放水里可以变成一朵花，但是不会散。等以后一定学会。</li></ol><h2 id="烹饪方式"><a href="#烹饪方式" class="headerlink" title="烹饪方式"></a>烹饪方式</h2><h3 id="煮"><a href="#煮" class="headerlink" title="煮"></a>煮</h3><h4 id="饺子"><a href="#饺子" class="headerlink" title="饺子"></a>饺子</h4><p>锅内加<strong>冷水</strong>，等水热后下料，在下料后到水饺浮于水面的时间里，不断用漏网捞底，防止水饺粘锅，加热到浮起后不用再管</p><p>冒泡后，加瓢冷水，继续煮至冒泡，再加水，如此反复，中途需使水线始终高于锅底火碰到的最高线，这是防止烧锅，还要高于水饺的高度，使其不碰底，避免粘锅</p><p>反复加水直到试吃时已经完全熟透</p><p>饺子一般需要加三次冷水，如此操作是防止沸腾的热水煮破面皮，使得里面的精华流出。一般煮破的水饺都不太好吃，因为味道都散到水里去了</p><h4 id="面条粉条"><a href="#面条粉条" class="headerlink" title="面条粉条"></a>面条粉条</h4><p>和饺子差不多，不过一般加一次冷水就好了</p><h3 id="蒸"><a href="#蒸" class="headerlink" title="蒸"></a>蒸</h3><h4 id="没有蒸锅"><a href="#没有蒸锅" class="headerlink" title="没有蒸锅"></a>没有蒸锅</h4><p>这是常遇到的情况，可以用一般锅子加小铁架代替，底下加适量水，最好是保持水线在火线之上，防烧锅，这种方法一般就蒸点剩饭剩菜之类的，大概十几分钟就ok了。</p><h4 id="有蒸锅"><a href="#有蒸锅" class="headerlink" title="有蒸锅"></a>有蒸锅</h4><p>加水，放其架子上直接无脑蒸即可</p><p>蒸这种方式没太多可操作性，主要小技巧在于控水，就是在底下的蒸水里放东西，比如一些香料，使其香味沿着水汽透到食材里，更加香。</p><h3 id="炒"><a href="#炒" class="headerlink" title="炒"></a>炒</h3><h4 id="大火爆炒"><a href="#大火爆炒" class="headerlink" title="大火爆炒"></a>大火爆炒</h4><p>所有烹饪方式里最具技巧性的方式，目前就会无脑翻炒，不粘锅就算成功。争取以后学会颠锅。</p><h4 id="小火慢炒"><a href="#小火慢炒" class="headerlink" title="小火慢炒"></a>小火慢炒</h4><p>新手就别学老手搞大火爆炒了，最近发现蛋炒饭我小火慢炒反而好吃些。</p><h2 id="面条汤底"><a href="#面条汤底" class="headerlink" title="面条汤底"></a>面条汤底</h2><p>基本原料：小葱，大蒜，香菜，小米辣</p><p>刀法1：葱，香菜，小米辣</p><p>拍烂+刀法3：大蒜</p><p>如果有时间可以用油炸一下蒜蓉，表面微微发黄即可，这样更香，炸完的油还可以取一些浇到之后的汤底上</p><h3 id="香辣汤底"><a href="#香辣汤底" class="headerlink" title="香辣汤底"></a>香辣汤底</h3><p>蒜蓉 + 葱花 + 小米辣 + 辣椒面（没有的用老干妈也行）+ 白芝麻（没有可以不放）+</p><p>之前的蒜油 + 一小勺生抽 + 一小勺香醋 + 适量盐 + 少许白糖（可不放）</p><p>该汤底还可当作饺子的蘸料</p><h3 id="麻汁汤底"><a href="#麻汁汤底" class="headerlink" title="麻汁汤底"></a>麻汁汤底</h3><p>一小勺芝麻香油 + 两小勺芝麻酱 + 两小勺生抽 + 一小勺香醋 + 白芝麻 + 榨菜 + 香菜 + 葱花</p><h3 id="清汤汤底"><a href="#清汤汤底" class="headerlink" title="清汤汤底"></a>清汤汤底</h3><p>盐 + 鸡精（几粒就行）+ 少许白糖 + 一小勺生抽 + 一小勺香醋 + 芝麻香油 + 葱花</p><h2 id="蛋炒饭"><a href="#蛋炒饭" class="headerlink" title="蛋炒饭"></a>蛋炒饭</h2><p>原料：鸡蛋，隔夜饭（颗粒感强），老干妈，葱花</p><p>注：技术不行建议用小火慢炒</p><ul><li>将鸡蛋打散，一般两个就够了</li><li>植物油润锅，猪油或者老干妈辣油下锅</li><li>油热后放打散的鸡蛋，搅散就可以了</li><li>接着放剩饭，放之前可以用手捏散，好炒些</li><li>放盐，放<strong>老抽</strong>，炒一分钟左右</li><li>再放葱花，炒个两到三分钟，香味满溢就可以收锅了</li></ul><p>蛋炒饭可扩展性非常强，可以加香肠，萝卜，香菇，玉米等一起炒。但是一定要注意，放入蛋炒饭里的食材尽量都切成颗粒状，口感才统一。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 做饭 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo公式渲染问题</title>
      <link href="/hexo-gong-shi-xuan-ran-wen-ti/"/>
      <url>/hexo-gong-shi-xuan-ran-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="不能渲染的公式"><a href="#不能渲染的公式" class="headerlink" title="不能渲染的公式"></a>不能渲染的公式</h2><p>hexo下自带的markdown不能渲染如下公式</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">\exist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="行内公式显示"><a href="#行内公式显示" class="headerlink" title="行内公式显示"></a>行内公式显示</h2><p>如果要支持行内公式，需要将</p><p><code>node_modules\marked\lib\marked.ejs</code></p><p>中的</p><p><code>escape:</code> 换成</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">escape<span class="token operator">:</span> /^\\(<span class="token punctuation">[</span>`*\<span class="token punctuation">[</span>\<span class="token punctuation">]</span>()#$+\-.!_&gt;<span class="token punctuation">]</span>)/<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>em:</code> 换成</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">em<span class="token operator">:</span> /^\*((?<span class="token operator">:</span>\*\*|<span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span>)+?)\*(?!\*)/<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意这样处理后，如果公式出现两个连续的{，中间要加空格</p><h2 id="公式换行问题"><a href="#公式换行问题" class="headerlink" title="公式换行问题"></a>公式换行问题</h2><p>如果在公式块中打 <code>\\</code> 来换行，如果是纯markdown就没问题，但是hexo会带入前端渲染，这个会被解析成一个 <code>\</code>，所以需要打四个 <code>\\\\</code>，就可以成功换行了</p>]]></content>
      
      
      <categories>
          
          <category> 博客问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022CCPC江苏省赛</title>
      <link href="/2022ccpc-jiang-su-sheng-sai/"/>
      <url>/2022ccpc-jiang-su-sheng-sai/</url>
      
        <content type="html"><![CDATA[<p>只记录写了的题</p><h2 id="A-PENTA-KILL"><a href="#A-PENTA-KILL" class="headerlink" title="A  PENTA KILL!"></a>A  <a href="https://codeforces.com/gym/103743/problem/A">PENTA KILL!</a></h2><p>签到题，主要难点在于读题…</p><p>如果你玩moba类游戏，会觉得他这个题意十分别扭，听说有个省赛金牌爷这题开局错了五发</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>string u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>m<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>_<span class="token punctuation">,</span> s<span class="token punctuation">]</span> <span class="token operator">:</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"PENTA KILL!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"SAD:("</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-Jump-and-Treasure"><a href="#C-Jump-and-Treasure" class="headerlink" title="C Jump and Treasure"></a>C <a href="https://codeforces.com/gym/103743/problem/C">Jump and Treasure</a></h2><h3 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h3><p>有个调皮的小朋友在数轴的柱子上往正方向跳，一开始在 $ 0 $ ，有 $n(1 \le n \le 10^6)$ 个柱子可以跳，分别位于 $1,2,3,\dots,n$ ，跳的距离不能超过 $p(2 \le p \le 10^6)$，每个柱子的权值为 $a_{i} (-10^9 \le a_{i} \le 10^9)$。有 $q(1 \le q \le 10^6)$ 次询问，每次询问给定一个数 $x$ ，限定跳的距离只能是 $x(1 \le x \le n)$ 的倍数，跳到  $[n+1,+\infty)$ 即视为游戏胜利。对每次询问，如果能胜利，求跳的柱子权值和最大值，否则输出 $Noob$ 。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>易知不用管大于p的跳跃距离。如果对剩下的每种跳跃距离枚举，找到每种距离能跳的所有柱子，符合调和级数复杂度，为 $O(nlogn)$。对每个距离找到的柱子进行动态规划，易列出转移式<br>$$<br>dp[i] =  max_{i−j \le p}(dp[j]) + a[i]<br>$$<br>然后这就是单调队列的经典运用了，注意空间优化，毕竟是用 $long \; long$ 存的，输入输出也注意优化，因为已经到了百万级了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> ll <span class="token operator">=</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> LLONG_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">/</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> LLONG_MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">,</span> <span class="token operator">++</span>cnt<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cnt <span class="token operator">-</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">&gt;</span> p<span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> p <span class="token operator">&gt;</span> n<span class="token punctuation">)</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> dp<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> p<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Noob\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="I-Cutting-Suffix"><a href="#I-Cutting-Suffix" class="headerlink" title="I Cutting Suffix"></a>I <a href="https://codeforces.com/gym/103743/problem/I">Cutting Suffix</a></h2><h3 id="大意-1"><a href="#大意-1" class="headerlink" title="大意"></a>大意</h3><p>给定一个字符串，将其所有后缀字符串分为两个集合，使得集合一的每个字符串与集合二的每个字符串两两之间最长公共前缀长度之和最小</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>如果该字符串不是只有一个字符，那么总可以按后缀字符串的首字母拆成两个集合，两个集合里的字符串两两公共前缀长度均为 $0$ ，总和为 $0$ 。如果该字符串只有一个字符，那么将长度为 $1$ 的后缀字符串单独划为一个集合，其他在另一个集合，总和即为原字符串长度减 $1$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>unordered_set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="J-Balanced-Tree"><a href="#J-Balanced-Tree" class="headerlink" title="J Balanced Tree"></a>J <a href="https://codeforces.com/gym/103743/problem/J">Balanced Tree</a></h2><h3 id="大意-2"><a href="#大意-2" class="headerlink" title="大意"></a>大意</h3><p>$T(1 \le T \le 10^6)$ 组测试数据，每组给一个数 $n(0 \le n \lt 2^{64})$ ，求节点数为 $n$ 的超级平衡二叉树数量，答案模$2^{64}$ 。如果一棵树为空树，或者左子树节点数和右子树节点数之差小于等于 $1$ ，则为超级平衡二叉树。对此题特别提一下空间只给了 $64MB$ ，时限是 $1.5s$ 。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>很容易想到下面的递归式。<br>$$<br>f[0]=1 \\\<br>f[x]=<br>\begin{cases}<br>2f[\frac{x}{2}]f[\frac{x}{2}-1],\quad x 为偶数 \\\<br>f[\frac{x-1}{2}]^2,\quad x为奇数<br>\end{cases}<br>$$<br>加上哈希就成了记忆化搜索，使用C++的unsigned long long自然溢出取模，代码如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> R <span class="token operator">=</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>R n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%llu"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> R<span class="token operator">&gt;</span> m<span class="token punctuation">;</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>function<span class="token operator">&lt;</span><span class="token function">R</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">&gt;</span> dfs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>R x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>R les <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>les<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>les <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">else</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>les<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>les<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%llu\n"</span><span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>懒得算复杂度了，直接交，果然超时。如果把容器和函数移到solve外面，那么就超空间。</p><p>考虑优化，由递归式可以看出结果为2的幂，要是能直接得到幂就好解了，幂大于等于64的结果为0，其他的输出结果即可</p><p>为了得到幂，进行取对数操作<br>$$<br>设\; g[x]=\log_{2}{f[x]}，有\\\<br>g[0]=0\\\<br>g[x]=<br>\begin{cases}<br>g[\frac{x}{2}]+g[\frac{x}{2}-1]+1,\quad x 为偶数\\\<br>2g[\frac{x-1}{2}],\quad x为奇数<br>\end{cases}\\\<br>由上易知\;\forall n \in N,存在\; x \in N^{*},\;g[n]=a \cdot g[x]+b \cdot g[x-1]+c\\\<br>化为\;g[n]=<br>\begin{cases}<br>a \cdot (g[\frac{x}{2}] + g[\frac{x}{2} − 1] + 1) + b \cdot (2g[\frac{x-1-1}{2}]) + c,\quad x是偶数\\\<br>a \cdot (2g[\frac{x-1}{2}]) + b \cdot (g[\frac{x-1}{2}] + g[\frac{x-1}{2} − 1] + 1) + c,\quad x是奇数<br>\end{cases}\\\<br>=<br>\begin{cases}<br>a \cdot g[\frac{x}{2}] + (a+2b) \cdot g[\frac{x}{2}-1] + c + a,\quad x是偶数\\\<br>(2a+b) \cdot g[\frac{x-1}{2}] + b \cdot g[\frac{x-1}{2}-1] + c + b,\quad x是奇数<br>\end{cases}\\\<br>于是初始\;g[n]=1\cdot g[n] + 0 \cdot g[n-1] + 0\\\<br>不断除二直到\;n = 1,化为\\\<br>g[n] = a\cdot g[1] + b \cdot g[0] + c=c<br>$$<br>最后只需要对 $c$  进行前文提到的判断即可得到答案</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> R <span class="token operator">=</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>R n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%llu"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>R a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+=</span> b<span class="token punctuation">,</span> c <span class="token operator">+=</span> b<span class="token punctuation">;</span><span class="token keyword">else</span>b <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+=</span> a<span class="token punctuation">,</span> c <span class="token operator">+=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%llu\n"</span><span class="token punctuation">,</span> <span class="token number">1ull</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里记录一个坑点，C++编译器种类实在太多了。。。你任何不规范的操作都有可能导致在不同编译器下结果不同，在此题中，之前犯的错误是忽略了编译器的警告，这样进行输出 <code>printf("%llu\n", 0);</code> ，在有些编译器下不一定输出0，而是一个很大的整数，除非在格式化输出前对 $0$ 进行强转，转为unsigned long long</p><h2 id="K-aaaaaaaaaaA-heH-heH-nuN"><a href="#K-aaaaaaaaaaA-heH-heH-nuN" class="headerlink" title="K aaaaaaaaaaA heH heH nuN"></a>K <a href="https://codeforces.com/gym/103743/problem/K">aaaaaaaaaaA heH heH nuN</a></h2><h3 id="大意-3"><a href="#大意-3" class="headerlink" title="大意"></a>大意</h3><p>$T(1\le T \le 1000)$ 组测试数据，每组给出一个数 $n (0 \le n \le 10^9)$ ，构造一个字符串，其所有子序列中，优雅字符串的数量为 $n$。优雅字符串的定义是，前缀为 $ nunhehheh $ ，后缀为任意非零数量的 $a$ 。且你输出的所有字符串长度总和不超过 $10^6$</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>该题有点反动态规划的感觉，通过答案来构造。一般这种数据范围这么大的，都是有指数级构造法的。很容易想到如果在  $ nunhehhe $ 后面，加上 $n$ 个 $h$ ，最后加上个 $a$ ，总能构造出所有的值。但由于输出长度限制不能这么做。</p><p>要指数级只能从 $a$ 的个数下手，容易发现 $nunhehheh\underbrace{a\dots a}_{x个}$ 这种形式符合要求的子序列有 $2^x-1$ 个，于是就可以从大到小枚举 $x$ ，$n$ 大于等于 $2^x -1$ 就减去，添加 $h$ </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>string ans <span class="token operator">=</span> <span class="token string">"nunhehhe"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>ans <span class="token operator">+=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans <span class="token operator">+=</span> <span class="token char">'h'</span><span class="token punctuation">;</span>n <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>ans <span class="token operator">+=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="L-Collecting-Diamonds"><a href="#L-Collecting-Diamonds" class="headerlink" title="L Collecting Diamonds"></a>L <a href="https://codeforces.com/gym/103743/problem/L">Collecting Diamonds</a></h2><h3 id="大意-4"><a href="#大意-4" class="headerlink" title="大意"></a>大意</h3><p>给你一个由字符 $A,B,C$  构成的字符串，长度小于 $2 \cdot 10^5$，每个字符的下标为 $1,2,3,\dots,n$ 。如果子串有 $ABC$  ，则可以进行操作，$A$ 为奇数下标则取走该子串的$A,C$，为偶数下标则取走 $B$ ，该字符串剩下的字符顺次拼接，并重新划定下标。问最多能够进行多少次操作。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>首先易见，两种操作中，只有取走 $A,C$ 才可以连续操作，同时该操作不会改变后面下标的奇偶性。只有取走 $B$，才会改变。</p><p>同时，我们可以发现每个类似 $AAA\dots ABC \dots CCC$ 的子串都相对独立，即对该子串进行操作，不会影响其他这类子串的字符数量，于是每次找到 $B$ 可以左右找 $A,C$，将原字符串划分。</p><p>还有，取走 $B$ 对上述划分后的子串，最多只能进行一次。我们为了能对后面进行更灵活的操作，肯定是尽可能让前面的子串都进行一次取 $B$ 的操作</p><p>于是我们可以用一个变量暂存前面取 $B$ 操作的次数，计算每个子串最多能删除多少次 $A,C$ </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">and</span> r <span class="token operator">&lt;</span> n <span class="token operator">and</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'A'</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'C'</span><span class="token punctuation">)</span><span class="token operator">--</span>l<span class="token punctuation">,</span> <span class="token operator">++</span>r<span class="token punctuation">,</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>r<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tot<span class="token punctuation">)</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>ans <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>tot<span class="token punctuation">,</span> cnt <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>tot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>ans <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>tot<span class="token punctuation">,</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>tot<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CCPC </tag>
            
            <tag> 各省省赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<h1 id="公式测试"><a href="#公式测试" class="headerlink" title="公式测试"></a>公式测试</h1><p>$O(n^2)$<br>$$<br>ans = \sum_{1}^n \sqrt{\frac{4ac-b^2}{2a}}<br>$$</p><h1 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h1><p>注：在hexo框架下，markdown标示c++语言需要写成cpp</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="表情测试"><a href="#表情测试" class="headerlink" title="表情测试"></a>表情测试</h1><p>😆</p>]]></content>
      
      
      <categories>
          
          <category> 博客问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
